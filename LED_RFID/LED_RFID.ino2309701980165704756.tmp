/****************************************************************************************************************************
   --------------------------------------------------------------------------------------------------------------------
   @Autecla: RFID Matrix
   Sketch/program to read data from more than one sensor and send the TAG number to Control Module by serial
   
   --------------------------------------------------------------------------------------------------------------------
****************************************************************************************************************************/   

#include <SPI.h>
#include <MFRC522.h>

//RFIDs PIN Numbers : RESET + SDAs

#define RST_PIN         9
#define SS_1_PIN        8
#define SS_2_PIN        7
#define SS_3_PIN        10
#define SS_4_PIN        6

// Number of sensors
#define NR_OF_READERS   4


byte ssPins[] = {SS_1_PIN, SS_2_PIN, SS_3_PIN, SS_4_PIN};

// Create an MFRC522 instance :

MFRC522 mfrc522[NR_OF_READERS];


//LEDs Pin Numbers 

int LED0red= 3;
int LED0green = 2;

int LED1red= A4;
int LED1green = 4;

int LED2red= A3;
int LED2green = A2;

int LED3red= A0;
int LED3green = A1;


int red = 255;
int green = 255;

/**

   Initialize.

*/

void setup() {

  Serial.begin(9600);           // Initialize serial communications with the PC

  pinMode(LED0red, OUTPUT);     // Initialize LEDs OUTPUTs
  pinMode(LED0green, OUTPUT);
  pinMode(LED1red, OUTPUT);
  pinMode(LED1green, OUTPUT);
  pinMode(LED2red, OUTPUT);
  pinMode(LED2green, OUTPUT);
  pinMode(LED3red, OUTPUT);
  pinMode(LED3green, OUTPUT);

  
  while (!Serial);              // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)

  SPI.begin();                  // Init SPI bus


  /* looking for MFRC522 readers */

  for (uint8_t reader = 0; reader < NR_OF_READERS; reader++) {

    mfrc522[reader].PCD_Init(ssPins[reader], RST_PIN);

    Serial.print(F("Position "));
    Serial.print(reader);
    Serial.print(F(": "));
    mfrc522[reader].PCD_DumpVersionToSerial();
    
    delay(100);

  }
}

void loop() {
  
  for (uint8_t reader = 0; reader < NR_OF_READERS; reader++) {

          // Looking for new cards
      
          if (mfrc522[reader].PICC_IsNewCardPresent() && mfrc522[reader].PICC_ReadCardSerial()) {
            
            Serial.print(F("M1"));
            Serial.print(F("P"));
            Serial.println(reader);
      
            // Show some details of the PICC (that is: the tag/card)

            Serial.print(F("UID: "));
            dump_byte_array(mfrc522[reader].uid.uidByte, mfrc522[reader].uid.size);
            Serial.println();

            switch(reader){
              case 0:
                setColor(red, green, LED0red, LED0green); 
                delay(1000);
              break;
            
              case 1:
                setColor(red, green, LED1red, LED1green); 
                delay(1000);
              break;
              
              case 2:
                setColor(red, green, LED2red, LED2green); 
                delay(1000);
              break;
              
              case 3:
                setColor(red, green, LED3red, LED3green); 
                delay(1000);
              break;
              
              default:
              setColor(0, 0, LED0red, LED0green); 
              setColor(0, 0, LED1red, LED1green); 
              setColor(0, 0, LED2red, LED2green); 
              setColor(0, 0, LED3red, LED3green); 
              break;
            }
           
            // Halt PICC
      
            mfrc522[reader].PICC_HaltA();
      
            // Stop encryption on PCD
      
            mfrc522[reader].PCD_StopCrypto1();
      
          } 

          int endd;
          endd = Serial.read();
          Serial.println(endd, DEC);
          delay(1000);
          if(endd == 4){
              setColor(0, 0, LED0red, LED0green); 
              setColor(0, 0, LED1red, LED1green); 
              setColor(0, 0, LED2red, LED2green); 
              setColor(0, 0, LED3red, LED3green); 
          }

  } 
}

/**

   Helper routine to dump a byte array as hex values to Serial.

*/

void dump_byte_array(byte * buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}

void setColor(int redValue, int greenValue, int LEDred, int LEDgreen) {
  analogWrite(LEDred, redValue);
  analogWrite(LEDgreen, greenValue);
}
